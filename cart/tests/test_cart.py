import pdb
from decimal import Decimal

from django.test import RequestFactory, TestCase
from django.urls import reverse_lazy

from cart.cart import Cart
from properties.factories import RoomFactory


class SessionDict(dict):
    """Dummy session dict to be attached to request factory"""

    modified = False


class CartTests(TestCase):
    """
    Test Suite for the main cart class and all its methods.
    """

    def setUp(self):
        self.factory = RequestFactory()
        self.request = self.factory.get(reverse_lazy("cart:cart-detail"))

        # Session manually supplied for request generated by RequestFactory
        self.items = {
            "616e207c-c4f2-4fec-9b66-8ed779914e08": {
                "quantity": 1,
                "price": "18357.82",
            },
            "bdae1946-2c22-4d7f-9b0e-ef8f4e9f65dc": {
                "quantity": 3,
                "price": "9851.53",
            },
        }
        self.request.session = SessionDict()
        self.request.session["cart"] = self.items

    def test_cart_is_initialized_correctly_for_empty_session(self):
        self.request.session.clear()
        cart = Cart(self.request)

        self.assertEqual(self.request.session["cart"], {})
        self.assertEqual(cart.cart, {})

    def test_existing_cart_in_session_is_correctly_parsed(self):
        # aliasing for simplicity
        request = self.request
        session = self.request.session

        # Act: instantiate the cart
        cart = Cart(request)

        # Assert: cart object has the session cart
        self.assertEqual(cart.cart, session["cart"])

    def test_adding_a_product_to_cart_works(self):
        """
        We start with an empty session and add a product later
        """
        self.request.session.clear()

        product = RoomFactory()
        product_id = str(product.id)

        cart = Cart(self.request)
        cart.add(product=product, quantity=2)

        self.assertEqual(
            cart.cart[product_id], {"quantity": 2, "price": str(product.weekday_price)}
        )

    def test_adding_a_product_to_cart_is_idempotent(self):
        self.request.session.clear()

        product = RoomFactory()
        product_id = str(product.id)

        cart = Cart(self.request)
        cart.add(product=product, quantity=2, override_quantity=True)

        # should only update quantity
        cart.add(product=product, quantity=5, override_quantity=True)

        self.assertEqual(
            cart.cart[product_id], {"quantity": 5, "price": str(product.weekday_price)}
        )
        self.assertEqual(len(cart), 5)
        self.assertEqual(len(cart.cart), 1)

    def test_removing_an_existing_product_from_cart_works(self):
        """
        Clear the session and create a product.
        Add it to cart and verify all ok
        Remove the product from cart and make sure it works.
        """

        self.request.session.clear()

        product = RoomFactory()
        product_id = str(product.id)

        cart = Cart(self.request)
        cart.add(product=product, quantity=2, override_quantity=True)

        self.assertIn(product_id, cart.cart)

        # now remove the trip and check its not in cart
        cart.remove(product=product)

        self.assertNotIn(product, cart.cart)

    def test_removing_a_non_existing_product_from_cart_has_no_effect(self):
        cart = Cart(self.request)
        product = RoomFactory()  # ðŸ‘ˆ this product is not added to cart

        self.assertEqual(len(cart), 4)  # num of beds
        self.assertEqual(len(cart.cart), 2)  # num of rooms

        # Try removing a product which is not present in cart
        cart.remove(product=product)
        # make sure removal has no effect
        self.assertEqual(len(cart), 4)  # num of beds
        self.assertEqual(len(cart.cart), 2)  # num of rooms

    def test_saving_a_cart_works(self):
        cart = Cart(self.request)
        self.assertFalse(cart.session.modified)

        cart.save()
        self.assertTrue(cart.session.modified)

    def test_clearing_a_cart_removes_all_products_from_cart(self):
        cart = Cart(self.request)

        self.assertEqual(len(cart), 4)  # num of beds
        self.assertEqual(len(cart.cart), 2)  # num of rooms

        cart.clear()
        self.assertNotIn("cart", cart.session)

        # We need to instantiate the cart again as the session itself was cleared
        cart = Cart(self.request)

        self.assertEqual(len(cart), 0)
        self.assertEqual(len(cart.cart), 0)

    def test_get_total_price_works_correctly(self):
        cart = Cart(self.request)

        expected = sum(
            Decimal(item["price"]) * item["quantity"] for item in cart.cart.values()
        )
        actual = cart.get_total_price()

        self.assertEqual(actual, expected)

    # def test_get_total_price_after_discount_works_correctly(self):
    #     cart = Cart(self.request)

    #     actual = cart.get_total_price_after_discount()
    #     expected = cart.get_total_price() - cart.get_discount()

    #     self.assertEqual(actual, expected)

    def test_len_of_cart_is_correctly_calculated(self):
        cart = Cart(self.request)

        self.assertEqual(len(cart), 4)  # num of beds
        self.assertEqual(len(cart.cart), 2)  # num of rooms
